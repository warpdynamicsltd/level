import stdlib:collections:sysstack;
import stdlib:sys:bin_allocator;
import stdlib:sys:app;

type Stack(T) extends stdlib:collections:sysstack:Stack(T, stdlib:sys:bin_allocator:Allocator) with rec();

method direct ()(Stack(T)) as ref(Stack(T))
{
  var this as ref(Stack(T));
  this = stdlib:sys:app:app.allocator.allocate(sizeof(Stack(T)));
  this.allocator = stdlib:sys:app:app.allocator;
  this.data_block = stdlib:collections:sysstack:DataBlock(T)(256, this.allocator);
  this.buff_length = 256;
  this.data_block.prev_addr = null;
  this.data_block.next_addr = null;
  this.start = this.data_block;
  this.index = 0;
  this.length = 0;
  return this;
}

method direct top(var this as ref(Stack(T))) as val ref(T)
{
  if (this.index > 0)
  {
    return this.data_block.data + (this.index - 1);
  }
  return null;
}

method direct del(var this as ref(Stack(T)))
{

  var data_block as ref(stdlib:collections:sysstack:DataBlock(T));
  data_block = this.start;
  while(data_block != null)
  {
    exec this.allocator.free(data_block.data);
    mem = data_block;
    data_block = data_block.next_addr;
    exec this.allocator.free(mem);
  }
  exec this.allocator.free(this);
}