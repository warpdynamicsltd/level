import stdlib:sys:app;
import stdlib:math:tools as *;

type Vector(A) as rec(
  var length = 0 as int,
  var data = null as ref(A)
);

type VectorIterator(A) as rec(
  var vector as ref(Vector(A)),
  var index = 0 as int
)

method init(var this as ref(Vector(A)), var length as int)
{
  this.length = length;
  if (this.length > 0)
  {
    this.data = stdlib:sys:app:app.allocator.allocate(length*sizeof(A));
  }
  else
  {
    this.data = null;
  }
}

method ()(Vector(A), var length as int) as Vector(A)
{
  var this as Vector(A);
  exec this.init(length);
  return this;
}

method del(var this as ref(Vector(A)))
{
  if (this.data != null)
  {
    if (A > object)
    {
      for (i = 0; i < this.length; inc i)
      {
        del this[i];
      }
    }

    exec stdlib:sys:app:app.allocator.free((ref(byte))(this.data));
  }
}

method [](var this as ref(Vector(A)), var index as int) as val ref(A)
{
  return this.data + index;
}

method length(var this as ref(Vector(A)))
{
  return this.length;
}

method iterator(var this as ref(Vector(A))) as VectorIterator(A)
{
  var res as VectorIterator(A);
  res.index = 0;
  res.vector = this;
  return res;
}

method next(var this as ref(VectorIterator(A)), var out as ref(A)) as bool
{
  if (this.index == this.vector.length) {return false}

  val out = this.vector[this.index];
  inc this.index;
  return true;
}

method ()(Vector(int), var from as int, var upto as int, var step = 1 as int) as Vector(int)
{
  res = Vector(int)((upto - from)/step);
  for (i = 0; i < res.length(); inc i)
  {
    res[i] = from + i*step;
  }
  return res;
}

method sub(var this as ref(Vector(A)), var i as int, var length as int) as Vector(A)
{
  if (i < 0) {i = 0}
  computed_length = min(this.length - i, length);
  if (i < this.length)
  {
    res = Vector(A)(computed_length);
    for (j = 0; j < computed_length; inc j)
    {
      res[j] = this[i + j];
    }
    return res;
  }
  return Vector(A)(0);
}

method ==(var a as ref(Vector(A)), var b as ref(Vector(A))) as bool
{
  if (a.length() != b.length()) {return false}
  var e as A;
  k = 0;
  foreach (e in a)
  {
    if (e != b[k]) {return false}
    inc k;
  }
  return true;
}

method !=(var a as ref(Vector(A)), var b as ref(Vector(A))) as bool
{
  return not(a == b);
}
