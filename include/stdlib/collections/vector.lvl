import stdlib:sys:app;

type Vector(A) as rec(
  var length = 0 as int,
  var data = null as ref(A)
);

type VectorIterator(A) as rec(
  var vector as ref(Vector(A)),
  var index = 0 as int
)

sub ()(Vector(A), var length as int) as Vector(A)
{
  var this as Vector(A);
  this.length = length;
  this.data = stdlib:sys:app:app.allocator.allocate(length*sizeof(A));
  return this;
}

sub [](var this as ref(Vector(A)), var index as int) as val ref(A)
{
  return this.data + index;
}

method length(var this as ref(Vector(A)))
{
  return this.length;
}

method iterator(var this as ref(Vector(A))) as VectorIterator(A)
{
  var res as VectorIterator(A);
  res.index = 0;
  res.vector = this;
  return res;
}

method next(var this as ref(VectorIterator(A)), var out as ref(A)) as bool
{
  if (this.index == this.vector.length) {return false}

  val out = this.vector[this.index];
  inc this.index;
  return true;
}