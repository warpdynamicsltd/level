import stdlib:sys:app as *;
import stdlib:collections:vector as *;
import stdlib:collections:stack as *;

type char as u32;
type str extends Vector(char) with rec();

method ()(str) as ref(str)
{
  var this as ref(str);
  this = app.allocator.allocate(sizeof(str));
  exec this.init(0);
  return this;
}

sub create_str(var length as int) as ref(str)
{
  var this as ref(str);
  this = app.allocator.allocate(sizeof(str));
  exec this.init(length);
  return this;
}

sub process_char_utf8(var stack as ref(Stack(byte)), var c as char) as bool
{
  if (0 <= c and c <= 0x7f)
  {
    exec stack.push(byte(c));
    return true;
  }
  if (0x80 <= c and c <= 0x7ff)
  {
    exec stack.push(byte(0xc0 | ((c >> 6) & 0x1f)));
    exec stack.push(byte(0x80 | (c & 0x3f)));
    return true;
  }
  if (0x0800 <= c and c <= 0xffff)
  {
    exec stack.push(byte(0xe0 | ((c >> 12) & 0xf)));
    exec stack.push(byte(0x80 | ((c >> 6) & 0x3f)));
    exec stack.push(byte(0x80 | (c & 0x3f)));
    return true;
  }
  if (0x10000 <= c and c <= 0x10ffff)
  {
    exec stack.push(byte(0xf0 | ((c >> 18) & 0x7)));
    exec stack.push(byte(0x80 | ((c >> 12) & 0x3f)));
    exec stack.push(byte(0x80 | ((c >> 6) & 0x3f)));
    exec stack.push(byte(0x80 | (c & 0x3f)));
    return true;
  }

  return false;
}

method utf8(var this as ref(str)) as ref(Vector(byte))
{
  stack = Stack(byte)();
  foreach (var c as char in this)
  {
    if (not process_char_utf8(stack, c))
    {
      return Vector(byte)(0);
    }
  }

  res = Vector(byte)(stack.length());
  k = 0;

  foreach (var b as byte in stack)
  {
    res[k] = b;
    inc k;
  }

  del stack;

  return res;
}

method ()(str, var a as ref(Vector(byte))) as ref(str)
{
  var res as ref(str);
  res = app.allocator.allocate(sizeof(str));
  stack = Stack(u32)();
  var c = 0 as u32;
  var remainder = -1 as int;
  foreach (var b as byte in a)
  {
    if (remainder > 0)
    {
      c = c << 6;
      c = c | (b & 0x3f);
      dec remainder;
      continue;
    }

    if (remainder == 0)
    {
      exec stack.push(c);
      c = 0;
      remainder = -1;
    }

    if (0x1 & (b >> 7) == 0)
    {
      c = b;
      exec stack.push(c);
      c = 0;
      continue;
    }

    if (0x7 & (b >> 5) == 0x6)
    {
      c = (b & 0x1f);
      remainder = 1;
      continue;
    }

    if (0xf & (b >> 4) == 0xe)
    {
      c = (b & 0xf);
      remainder = 2;
      continue;
    }

    if (0x1f & (b >> 3) == 0x1e)
    {
      c = (b & 0x7);
      remainder = 3;
      continue;
    }

  }

  if (remainder == 0)
  {
    exec stack.push(c);
  }

  exec res.init(stack.length());
  k = 0;
  foreach (c in stack)
  {
    res[k] = c;
    inc k;
  }

  del stack;

  return res;
}

sub prepare_vector(var r as ref(byte)) as ref(Vector(byte))
{
  var res as ref(Vector(byte));
  res = app.allocator.allocate(sizeof(Vector(byte)));
  stack = Stack(byte)();
  var i = 0 as int;
  while(r[i] != 0)
  {
    exec stack.push(r[i]);
    inc i;
  }

  exec res.init(stack.length());

  i = 0;
  foreach (var b as byte in stack)
  {
    res[i] = b;
    inc i;
  }
  del stack;
  return res;
}

method new ()(str, var a as ref(byte)) as ref(str)
{
  v = prepare_vector(a);
  res = str(v);
  del v;
  return res;
}

method new +(var a as ref(str), var b as ref(str)) as ref(str)
{
  var res as ref(str);
  res = app.allocator.allocate(sizeof(str));
  exec res.init(a.length() + b.length());
  var c as char;
  k = 0;
  foreach (c in a)
  {
    res[k] = c;
    inc k;
  }
  foreach (c in b)
  {
    res[k] = c;
    inc k;
  }

  return res;
}

method echo(var s as ref(str))
{
  u = s.utf8();
  len = u.length();
  v = Vector(byte)(u.length() + 1);
  for (i=0; i < u.length(); inc i)
  {
    v[i] = u[i];
  }
  v[len] = 0;
  echo v.data;
  del u;
  del v;
}