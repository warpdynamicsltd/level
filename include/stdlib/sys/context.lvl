import stdlib:collections:stack as *;
import stdlib:sys:app as *;

type object as rec();

type mem as rec
(
  var addr = null as ref(byte),
  var ref_count = 0 as int
)

method direct ()(mem, var size as int) as ref(mem)
{
  var this as ref(mem);
  this = app.allocator.allocate(sizeof(mem));
  this.addr = app.allocator.allocate(size);
  this.ref_count = 0;

  if (gc.global_stack != null)
  {
    exec gc.global_stack.push(this);
  }

  return this;
}

method direct del(var this as ref(mem))
{
  if (this.addr != null)
  {
    exec app.allocator.free(this.addr);
    this.addr = null;
  }
  exec app.allocator.free(this);
}

type mem_obj as rec
(
  var m = null as ref(mem)
)

type mem_obj_shadow as rec
(
  var m = null as ref(mem)
)

method direct ()(mem_obj, var size = 0 as int) as mem_obj
{
  var res as mem_obj;
  if (size == 0)
  {
    res.m = null;
    return res;
  }

  res.m = mem(size);
  res.m.ref_count = 0;

  return res;
}

method direct ptr(var this as ref(mem_obj), A) as val ref(A)
{
  return this.m.addr;
}

method direct del(var this as ref(mem_obj))
{
  # echo "deleting ...";
  if (this.m != null and this.m.ref_count > 0)
  {
    dec this.m.ref_count;
#    if (this.m.ref_count == 0)
#    {
#      #del this.m;
#      #this.m.ref_count = -1;
#      exec app.allocator.free(this.m.addr);
#      this.m.addr = null;
#      this.m.ref_count = -1;
#
#    }
  }

  #this.m = null;
}

method direct =(var this as ref(mem_obj), var a as ref(mem_obj))
{

  if (this.m != null)
  {
    del this;
  }
  else
  {
    exec gc.var_stack.push((ref(mem_obj_shadow))(this));
    inc gc.n_var_stack.top();
  }

  this.m = a.m;
  inc this.m.ref_count;
}

type GC as rec
(
  var global_stack = null as ref(Stack(ref(mem))),
  var n_var_stack = null as ref(Stack(int)),
  var var_stack = null as ref(Stack(ref(mem_obj_shadow))),
  var block as bool,
)

method direct ()(GC) as GC
{
  var res as GC;
  res.global_stack = Stack(ref(mem))();
  res.n_var_stack = Stack(int)();
  res.var_stack = Stack(ref(mem_obj_shadow))();
  return res;
}

method direct clear(var this as ref(GC))
{
  del this.n_var_stack;
  del this.var_stack;
  del this.global_stack;
  this.global_stack = null;
}

method collect(var this as ref(GC))
{
  if (gc.global_stack != null and gc.global_stack.length() > 0)
  {

    stack = Stack(ref(mem))();
    foreach(var m as ref(mem) in gc.global_stack)
    {
      if (m.ref_count <= 0)
      {
        del m;
      }
      else
      {
        exec stack.push(m);
      }

    }
    del gc.global_stack;
    gc.global_stack = stack;
  }
}

global gc = GC() as GC;

sub direct on_opening()
{
  exec gc.n_var_stack.push(0);
}

sub direct on_closing()
{
  exec gc.collect();

  var n as int;
  var out as ref(mem_obj_shadow);

  exec gc.n_var_stack.pop(ref n);

  for (i = 0; i < n; inc i)
  {
    exec gc.var_stack.pop(ref out);
    if (out.m != null)
    {
      dec out.m.ref_count;
     }
  }
}