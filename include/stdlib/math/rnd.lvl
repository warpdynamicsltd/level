import stdlib:math:bigint as *;
import stdlib:obj:collections:vector as *;

type rnd as rec(
  var seed as u64
)

method inline ()(rnd, var seed as u64) as rnd
{
  var this as rnd;
  this.seed = seed;
  return this;
}

method inline ()(rnd, var seed as int) as rnd
{
  var this as rnd;
  this.seed = seed;
  return this;
}

method inline rnd_u64(var this as ref(rnd)) as u64
{
  this.seed = 6364136223846793005 * this.seed;
  inc this.seed, 1442695040888963407;
  return this.seed;
}

method inline rnd_int(var this as ref(rnd)) as int
{
  return this.rnd_u64();
}

method inline rnd_float(var this as ref(rnd)) as float
{
  nom = abs(this.rnd_int());
  if (nom == 0x7fffffffffffffff)
  {
    dec nom;
  }
  return float(nom)/int(0x7fffffffffffffff);
}

method new inline rnd_bigint(var this as ref(rnd), var segments as int) as bigint
{
  segments = 1 + segments * this.rnd_float();
  for_sign = this.rnd_int();
  var res as bigint;
  res.data = vector(u64)(segments);
  for (i = 0; i < segments; inc i)
  {
    res.data.obj.ptr.data[i] = this.rnd_u64();
  }
  if (for_sign > 0)
  {
    res.sign = 1;
  }
  else
  {
    res.sign = 0xff;
  }
  return res;
}