import stdlib:obj:collections:vector as *;
import stdlib:obj:collections:stack as *;
import stdlib:obj:collections:str as *;
import stdlib:math:tools as *;
import stdlib:sys:app as *;
import stdlib:sys:context as *;

type _bigint as rec
(
  var data = null as ref(u64),
  var count as int,
  var sign as byte
)

method ()(_bigint, var sign as byte, var count as int) as ref(_bigint)
{
  var res as ref(_bigint);
  res = app.allocator.allocate(sizeof(_bigint));
  res.data = app.allocator.allocate(sizeof(u64) * count);
  res.count = count;
  res.sign = sign;
  return res;
}

method inline del(var this as ref(_bigint))
{
  if (this != null)
  {
    if (this.data != null)
    {
      exec app.allocator.free(this.data);
    }
    exec app.allocator.free(this);
  }
}

type bigint extends obj(_bigint) with rec();

sub neg(var a as byte) as byte
{
  if (a == 1) {return 0xff}
  if (a == 0xff) {return 1}
}

method new ()(bigint, var n as u64) as bigint
{
  this = obj(_bigint)(_bigint(byte(1), 1));
  this.obj.ptr.data[0] = n;
  return this;
}

method new()(bigint, var n = 0 as int) as bigint
{
  var sign as byte;

  if (n < 0)
  {
    sign = 0xff;
  }
  else
  {
    sign = 1;
  }

  this = obj(_bigint)(_bigint(sign, 1));

  this.obj.ptr.data[0] = abs(n);
  return this;
}


method new()(bigint, var a as bigint) as bigint
{
  this = obj(_bigint)(_bigint(a.obj.ptr.sign, a.obj.ptr.count));

  for (i = 0; i < a.obj.ptr.count; inc i)
  {
    this.obj.ptr.data[i] = a.obj.ptr.data[i];
  }

  return this;
}

method add_abs_in_place(var this as ref(_bigint), var other as ref(_bigint), var index as int)
# user needs to guarantee enough space for add in this
{
  var c = 0 as u64;
  k = other.count;
  for(i = 0; i < k; inc i)
  {
    this.data[index + i] = __api__(add, this.data[index + i], other.data[i], c);
  }
  #inc this.data[index + k], c;
  exec this.add_abs_in_place(c, index + k);
}

method sub_abs_in_place(var this as ref(_bigint), var other as ref(_bigint), var index as int)
# user needs to guarantee enough space for add in this
{
  var c = 0 as u64;
  k = other.count;
  for(i = 0; i < k; inc i)
  {
    this.data[index + i] = __api__(sub, this.data[index + i], other.data[i], c);
  }
  exec this.sub_abs_in_place(c, index + k);
}

method add_abs_in_place(var this as ref(_bigint), var other as ref(_bigint))
# user needs to guarantee enough space for add in this
{
  var c = 0 as u64;
  k = other.count;
  for(i = 0; i < k; inc i)
  {
    this.data[i] = __api__(add, this.data[i], other.data[i], c);
  }
  exec this.add_abs_in_place(c, k);
}

method sub_abs_in_place(var this as ref(_bigint), var other as ref(_bigint))
# user needs to guarantee enough space for add in this
{
  var c = 0 as u64;
  k = other.count;
  for(i = 0; i < k; inc i)
  {
    this.data[i] = __api__(sub, this.data[i], other.data[i], c);
  }
  exec this.sub_abs_in_place(c, k);
}

method add_abs_in_place(var this as ref(_bigint), var a as u64, var index as int)
# user needs to guarantee enough space for add in this
{
  var c = 0 as u64;
  this.data[index] = __api__(add, this.data[index], a, c);
  while (c != 0)
  {
    inc index;
    this.data[index] = __api__(add, this.data[index], 0, c)
  }
}

method sub_abs_in_place(var this as ref(_bigint), var a as u64, var index as int)
# user needs to guarantee enough space for add in this
{
  var c = 0 as u64;
  this.data[index] = __api__(sub, this.data[index], a, c);
  while (c != 0)
  {
    inc index;
    this.data[index] = __api__(sub, this.data[index], 0, c)
  }
}

method normalise(var this as ref(_bigint))
{
  while(this.count > 1 and this.data[this.count - 1] == 0)
  {
    dec this.count;
  }
}

method is_zero(var this as ref(_bigint)) as bool
{
  return this.count == 1 and this.data[0] == 0;
}

method add_abs(var this as ref(_bigint), var other as ref(_bigint)) as ref(_bigint)
{
  var r as u64;
  var c as u64;
  var a as u64;
  var b as u64;

  n = max(this.count, other.count) + 1;
  res = _bigint(byte(1), n);

  for (i = 0; i < this.count; inc i)
  {
    res.data[i] = this.data[i];
  }

  for (i = this.count; i < n; inc i)
  {
    res.data[i] = 0;
  }

  exec res.add_abs_in_place(other);
  exec res.normalise();

  return res;
}

method _sub_abs(var this as ref(_bigint), var other as ref(_bigint)) as ref(_bigint)
{
  var r as u64;
  var c as u64;
  var a as u64;
  var b as u64;

  n = max(this.count, other.count) + 1;
  res = _bigint(byte(1), n);

  for (i = 0; i < this.count; inc i)
  {
    res.data[i] = this.data[i];
  }

  for (i = this.count; i < n; inc i)
  {
    res.data[i] = 0;
  }

  exec res.sub_abs_in_place(other);
  exec res.normalise();

  return res;
}

method lt_abs(var this as ref(_bigint), var a as ref(_bigint)) as bool
{
  if (a.count > this.count) {return true}
  if (a.count < this.count) {return false}
  for (i = this.count - 1; i >= 0; dec i)
  {
    if (this.data[i] < a.data[i]) {return true}
    if (this.data[i] > a.data[i]) {return false}
  }

  return false;
}

method eq_abs(var this as ref(_bigint), var a as ref(_bigint)) as bool
{
  if (a.count > this.count) {return false}
  if (a.count < this.count) {return false}
  for (i = this.count - 1; i >= 0; dec i)
  {
    if (this.data[i] != a.data[i]) {return false}
  }

  return true;
}

method eq(var this as ref(_bigint), var a as ref(_bigint)) as bool
{
  return this.eq_abs(a) and this.sign == a.sign;
}

method neq(var this as ref(_bigint), var a as ref(_bigint)) as bool
{
  return not(this.eq(a));
}

method ==(var this as ref(bigint), var a as ref(bigint)) as bool
{
  return this.obj.ptr.eq(a.obj.ptr);
}

method !=(var this as ref(bigint), var a as ref(bigint)) as bool
{
  return this.obj.ptr.neq(a.obj.ptr);
}

method sub_abs(var this as ref(_bigint), var a as ref(_bigint)) as ref(_bigint)
{
  var res as ref(_bigint);

  if (a.lt_abs(this) or this.eq(a))
  {
    return this._sub_abs(a);
  }
  else
  {
    res = a._sub_abs(this);
    if (res.is_zero())
    {
      res.sign = 1;
    }
    else
    {
      res.sign = 0xff;
    }

    return res;
  }
}

method add(var this as ref(_bigint), var a as ref(_bigint)) as ref(_bigint)
{

  if (this.sign == 1 and a.sign == 1)
  {
    return this.add_abs(a);
  }

  if (this.sign == 1 and a.sign == 0xff)
  {
    return this.sub_abs(a);
  }
  if (this.sign == 0xff and a.sign == 1)
  {
    return a.sub_abs(this);
  }
  if (this.sign == 0xff and a.sign == 0xff)
  {
    res = this.add_abs(a);
    if (res.is_zero())
    {
      res.sign = 1;
    }
    else
    {
      res.sign = 0xff;
    }
    return res;
  }
}

method new +(var this as ref(bigint), var a as ref(bigint)) as bigint
{
  res = obj(_bigint)(this.obj.ptr.add(a.obj.ptr));
  return res;
}

method mul_abs_in_place(var this as ref(_bigint), var a as u64, var b as u64, var index as int)
# user needs to guarantee enough space for add in this
{
    var r as u64;
    var d as u64;
    var c = 0 as u64;
    r = __api__(mul, a, b, d);
    if (d == 0)
    {
      exec this.add_abs_in_place(r, index);
    }
    else
    {
      exec this.add_abs_in_place(r, index);
      exec this.add_abs_in_place(d, index + 1);
    }
}

method new -(var this as ref(bigint)) as bigint
{
  res = bigint([this]);

  if (not res.obj.ptr.is_zero())
  {
    if (res.obj.ptr.sign == 0x1)
    {
      res.obj.ptr.sign = 0xff;
    }
    else
    {
      res.obj.ptr.sign = 0x1;
    }
  }
  return res;
}


method new -(var this as ref(bigint), var a as ref(bigint)) as bigint
{
  return [this] + (-[a]);
}

sub slow_mul_abs(var a as ref(_bigint), var b as ref(_bigint)) as ref(_bigint)
{
  k = a.count * b.count + 1;
  res = _bigint(byte(1), k);

  for (i = 0; i < k; inc i)
  {
    res.data[i] = 0;
  }

  for (i = 0; i < a.count; inc i)
  {
    for (j = 0; j < b.count; inc j)
    {
      exec res.mul_abs_in_place(a.data[i], b.data[j], i + j);
    }
  }

  exec res.normalise();

  return res;
}

method mul(var this as ref(_bigint), var a as ref(_bigint)) as ref(_bigint)
{
  res = slow_mul_abs(this, a);

  if (this.sign == a.sign)
  {
    res.sign = 1;
    return res;
  }
  else
  {
    if (res.is_zero())
    {
      res.sign = 1;
    }
    else
    {
      res.sign = 0xff;
    }
    return res;
  }
}

method new *(var this as ref(bigint), var a as ref(bigint)) as bigint
{
  return obj(_bigint)(this.obj.ptr.mul(a.obj.ptr));
}

method <(var this as ref(_bigint), var a as ref(_bigint)) as bool
{
  if (this.sign == 0xff and a.sign == 1) {return true}
  if (this.sign == 1 and a.sign == 0xff) {return false}
  if (this.sign == 1 and a.sign == 1)
  {
    return this.lt_abs(a);
  }
  if (this.sign == 0xff and a.sign == 0xff)
  {
    return a.lt_abs(this);
  }
}

method <(var this as ref(bigint), var a as ref(bigint)) as bool
{
  return this.obj.ptr < a.obj.ptr;
}

method <=(var this as ref(bigint), var a as ref(bigint)) as bool
{
  return this < a or this == a;
}

method >(var this as ref(bigint), var a as ref(bigint)) as bool
{
  return a < this;
}

method >=(var this as ref(bigint), var a as ref(bigint)) as bool
{
  return a < this or this == a;
}

method new abs(var this as ref(bigint)) as bigint
{
  res = bigint(this);
  res.obj.ptr.sign = 1;
  return res;
}

method =(var this as ref(bigint), var a as ref(bigint))
{
  del this.obj;
  this.obj <- a.obj;
  if (this.obj != null)
  {
    inc this.obj.ref_count;
  }
}

method =(var this as ref(bigint), var a as A)
{
  [this] = bigint(a);
}

method new +(var this as ref(bigint), var a as A) as bigint
{
  return [this] + bigint(a);
}

method new +(var this as ref(bigint), var a as A, swap) as bigint
{
  return bigint(a) + [this];
}

method new -(var this as ref(bigint), var a as A) as bigint
{
  return [this] - bigint(a);
}

method new -(var this as ref(bigint), var a as A, swap) as bigint
{
  return bigint(a) - [this];
}

method new *(var this as ref(bigint), var a as A) as bigint
{
  return [this] * bigint(a);
}

method new *(var this as ref(bigint), var a as A, swap) as bigint
{
  return bigint(a) * [this];
}

method ==(var this as ref(bigint), var a as A) as bool
{
  return [this] == bigint(a);
}

method ==(var this as ref(bigint), var a as A, swap) as bool
{
  return [this] == bigint(a);
}

method !=(var this as ref(bigint), var a as A) as bool
{
  return [this] != bigint(a);
}

method !=(var this as ref(bigint), var a as A, swap) as bool
{
  return bigint(a) != [this];
}

method <(var this as ref(bigint), var a as A) as bool
{
  return [this] < bigint(a);
}

method <(var this as ref(bigint), var a as A, swap) as bool
{
  return bigint(a) < [this];
}

method <=(var this as ref(bigint), var a as A) as bool
{
  return [this] <= bigint(a);
}

method <=(var this as ref(bigint), var a as A, swap) as bool
{
  return bigint(a) <= [this];
}

method >(var this as ref(bigint), var a as A) as bool
{
  return [this] > bigint(a);
}

method >(var this as ref(bigint), var a as A, swap) as bool
{
  return bigint(a) > [this];
}

method >=(var this as ref(bigint), var a as A) as bool
{
  return [this] >= bigint(a);
}

method >=(var this as ref(bigint), var a as A, swap) as bool
{
  return bigint(a) >= [this];
}

method echo (var this as ref(bigint))
{
  res = str();

  var prefix as str;
  if (this.obj.ptr.sign == 0xff)
  {
    prefix = str("-");
  }
  else
  {
    prefix = str();
  }

  for (i = this.obj.ptr.count - 1; i >= 0; dec i)
  {
    res = res + hex64(this.obj.ptr.data[i]);
  }
  echo prefix + res;
}