import stdlib:sys:context as *;
import stdlib:collections:vector as *;

type vector(A) extends obj(Vector(A)) with rec();

type vector_iterator(A) as rec(
  var vector = null as ref(Vector(A)),
  var index = 0 as int
)

method new ()(vector(A), var length as int) as vector(A)
{
  return obj(Vector(A))(Vector(A)(length));
}

method [](var this as ref(vector(A)), var i as int) as val ref(A)
{
  return this.obj.ptr.data + i;
}

method length(var this as ref(vector(A))) as int
{
  return this.obj.ptr.length;
}

method iterator(var this as ref(vector(A))) as vector_iterator(A)
{
  return this.obj.ptr.iterator();
}

method next(var this as ref(vector_iterator(A)), var out as ref(A)) as bool
{
  if (this.index == this.vector.length) {return false}

  val out = this.vector[this.index];
  inc this.index;
  return true;
}

method new sz_vector(var this as ref(vector(byte))) as vector(byte)
{
  v = vector(byte)(this.length() + 1);
  for(i = 0; i < this.length(); inc i)
  {
    v[i] = this[i];
  }
  v[i] = 0;
  return v;
}

method echo (var this as ref(vector(byte)))
{
  echo this.sz_vector().obj.ptr.data;
}