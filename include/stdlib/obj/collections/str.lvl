import stdlib:collections:str;
import stdlib:collections:vector as *;
import stdlib:sys:context as *;
import stdlib:obj:collections:vector as *;
import stdlib:obj:collections:stack as *;

type char as u32;
type str extends obj(stdlib:collections:str:str) with rec();

method new ()(str, var a = "" as ref(byte)) as str
{
  return obj(stdlib:collections:str:str)(stdlib:collections:str:str(a));
}

method new ()(str, var v as vector(byte)) as str
{
  return obj(stdlib:collections:str:str)(stdlib:collections:str:str(v.sz_vector().obj.ptr.data));
}

method [](var this as ref(str), var index as int) as val ref(char)
{
  return this.obj.ptr.data + index;
}

method new +(var a as ref(str), var b as ref(str)) as str
{
  return obj(stdlib:collections:str:str)(a.obj.ptr + b.obj.ptr);
}

method new sub(var this as ref(str), var i as int, var length as int) as str
{
  return obj(stdlib:collections:str:str)(this.obj.ptr.sub(i, length));
}

method ==(var a as ref(str), var b as ref(str)) as bool
{
  return a.obj.ptr == b.obj.ptr;
}

method !=(var a as ref(str), var b as ref(str)) as bool
{
  return not(a.obj.ptr == b.obj.ptr);
}

method length(var this as ref(str))
{
  return this.obj.ptr.length;
}

type str_iterator as rec
(
  var s as ref(str),
  var index as int
)

method next(var this as ref(str_iterator), var out as ref(char)) as bool
{
  if (this.index == this.s.obj.ptr.length) {return false}

  val out = this.s[this.index];
  inc this.index;
  return true;
}

method iterator(var this as ref(str)) as str_iterator
{
  var res as str_iterator;
  res.s = this;
  res.index = 0;
  return res;
}

method new utf8(var this as ref(str)) as vector(byte)
{
  return obj(Vector(byte))(this.obj.ptr.utf8());
}

method new sz_utf8(var this as ref(str)) as vector(byte)
{
  u = this.utf8();
  len = u.length();
  res = vector(byte)(len + 1);
  for (i = 0; i < len; inc i)
  {
    res[i] = u[i];
  }
  res[len] = 0;
  return res;
}

method echo(var s as ref(str))
{
  echo s.obj.ptr;
}

method new ()(str, var st as stack(char)) as str
{
  res = obj(stdlib:collections:str:str)(stdlib:collections:str:create_str(st.length()));
  i = st.length() - 1;
  foreach (var c as char in st)
  {
    res.obj.ptr[i] = c;
    dec i;
  }
  return res;
}

method new ()(str, var n as int) as str
{
  var prefix as str;
  st = stack(char)();
  if (n < 0)
  {
    prefix = str("-");
  }
  else
  {
    prefix = str();
  }
  n = abs(n);

  while (n >= 0)
  {
    exec st.push(char(0x30 + n % 10));
    n = n/10;
    if (n == 0) {break}
  }

  return prefix + str(st);
}

method new ()(str, var n as u64) as str
{
  st = stack(char)();

  while (n >= 0x0)
  {
    exec st.push(char(0x30 + n % 0xa));
    n = n/0xa;
    if (n == 0x0) {break}
  }

  return str(st);
}

sub new hex64(var n as int) as str
{
  var prefix as str;
  st = stack(char)();
  if (n < 0)
  {
    prefix = str("-");
  }
  else
  {
    prefix = str();
  }

  n = abs(n);

  for (i = 0; i < 16; inc i)
  {
    d = n & 0xf;
    if (d < 10)
    {
      exec st.push(char(0x30 + d));
    }
    else
    {
      exec st.push(char(0x61 + d));
    }
    n = n >> 4;
  }

  return prefix + str(st);
}

sub new hex64(var n as u64) as str
{
  st = stack(char)();
  for (i = 0; i < 16; inc i)
  {
    d = n & 0xf;
    if (d < 10)
    {
      exec st.push(char(0x30 + d));
    }
    else
    {
      exec st.push(char(0x57 + d));
    }
    n = n >> 4;
  }

  return str(st);
}