import stdlib:sys:app as *;
import stdlib:sys:context as *;

type _str as rec
(
  var data = null as ref(byte),
  var count = 0 as int
)

sub len(var s as ref(byte)) as int
{
  i = 0;
  while(s[i] != 0)
  {
    inc i;
  }
  return i;
}

method ()(_str, var a as ref(byte)) as ref(_str)
{
  var this as ref(_str);
  this = app.allocator.allocate(sizeof(_str));
  size = len(a) + 1;
  this.data = app.allocator.allocate(size);
  for (i = 0; i < size; inc i)
  {
    this.data[i] = a[i];
  }
  this.count = size - 1;
  return this;
}

method [](var this as ref(_str), var i as int) as val ref(byte)
{
  return this.data + i;
}

method +(var a as ref(_str), var b as ref(_str)) as ref(_str)
{
  var res as ref(_str);
  res = app.allocator.allocate(sizeof(_str));
  res.data = app.allocator.allocate(a.count + b.count + 1);
  res.count = a.count + b.count;
  k = 0;

  for (i = 0; i < a.count; inc i)
  {
    res[k] = a[i];
    inc k;
  }
  for (i = 0; i < b.count + 1; inc i)
  {
    res[k] = b[i];
    inc k;
  }
  return res;
}

method del(var this as ref(_str))
{
  if (this != null)
  {
    if (this.data != null)
    {
      exec app.allocator.free(this.data);
    }
    exec app.allocator.free(this);
  }
}

type str extends obj(_str) with rec();

method new ()(str, var a as ref(byte)) as str
{
  return obj(_str)(_str(a));
}

method new +(var a as ref(str), var b as ref(str)) as str
{
  return obj(_str)(a.obj.ptr + b.obj.ptr);
}

method echo (var this as ref(str))
{
  if (this != null and this.obj != null and this.obj.ptr != null and this.obj.ptr.data != null)
  {
    echo this.obj.ptr.data;
  }
}