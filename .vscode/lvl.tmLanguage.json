{
  "scopeName": "source.lvl",
  "fileTypes": ["lvl"],
  "name": "Level Compiler Syntax",
  "patterns": [
      {
          "match": "#.*$",
          "name": "comment.line.lvl"
      },
      {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double.lvl",
          "patterns": [
              {
                  "match": "\\\\.",
                  "name": "constant.character.escape.lvl"
              }
          ]
      },
      {
          "begin": "'",
          "end": "'",
          "name": "string.quoted.single.lvl",
          "patterns": [
              {
                  "match": "\\\\.",
                  "name": "constant.character.escape.lvl"
              }
          ]
      },
      {
          "match": "\\b(as|break|continue|dec|def|del|direct|echo|else|entry|exec|extends|finish|for|foreach|global|if|import|in|inc|inline|metal|method|mutable|new|return|sizeof|sub|type|typeid|var|while|with)\\b",
          "name": "keyword.control.lvl"
      },
      {
          "match": "\\b(array|bool|byte|false|float|i32|i64|int|null|object|rec|ref|swap|true|u32|u64|val)\\b",
          "name": "storage.type.lvl"
      },
      {
          "match": "\\b(abs|and|ceil|cos|cot|exp|floor|log|log10|log2|not|or|pow|pow10|pow2|round|sgn|shift|sin|sqrt|tan)\\b",
          "name": "support.function.lvl"
      },
      {
          "match": "\\b[0-9]+\\b",
          "name": "constant.numeric.lvl"
      },
      {
          "match": "\\b0x[0-9a-fA-F]+\\b",
          "name": "constant.numeric.hex.lvl"
      },
      {
          "match": "[{}\\[\\]()]",
          "name": "punctuation.section.lvl"
      },
      {
          "match": "[!$=%&*+\\-/<=>|~^]",
          "name": "keyword.operator.lvl"
      }
  ],
  "repository": {}
}
