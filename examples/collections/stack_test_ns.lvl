import stdlib:sys:brk_allocator as A;
import stdlib:collections:stack as B;

entry
{
  var allocator as A:Allocator;

  var payload as u64;

  stack = B:Stack(u64, A:Allocator)(ref allocator, 113);

  N = 5138;

  echo "start pushing";

  var k as u64;
  var res as bool;


  for (k = 1; k < N; inc k)
  {
    payload = k;
    exec stack.push(payload);
  }

  echo "start iterating";

  res = true;
  k = 1;
  foreach (payload in stack)
  {
    #echo p;
    res = res and (payload == k);
    inc k;
  }
  echo res;

  echo "start iterating";

  res = true;
  k = 1;
  foreach (var p as u64 in stack)
  {
    #echo p;
    res = res and (p == k);
    inc k;
  }
  echo res;

  echo "start iterating";

  iter = stack.iterator();

  res = true;
  k = 1;
  while (iter.next(ref payload))
  {
    res = res and (payload == k);
    inc k;
  }
  echo res;

  k = N - 1;
  res = true;

  echo "start popping";

  while (stack.pop(ref payload))
  {
    # echo payload;
    res = res and (payload == k);
    dec k;
  }

  echo res;

  echo "start pushing";

  for (k = 1; k < N; inc k)
  {
    payload = k;
    exec stack.push(payload);
  }

  k = N - 1;
  res = true;

  echo "start popping";

  while (stack.pop(ref payload))
  {
    res = res and (payload == k);
    dec k;
  }


  echo res;
  echo "end";
}