import stdlib:sys:context as *;
import stdlib:sys:app as *;

sub len(var s as ref(byte)) as int
{
  i = 0;
  while(s[i] != 0)
  {
    inc i;
  }
  return i;
}

type str as rec(
  var data = mem_obj() as mem_obj,
  var length = 0 as int
)

method =(var this as ref(str), var a as ref(str))
{
  exec on_opening();
  this.data = a.data;
  this.length = a.length;
  exec on_closing();
}

method ()(str, var s as ref(byte)) as str
{
  exec on_opening();
  var res as str;
  n = len(s);
  res.data = mem_obj(n + 1);
  res.length = n;
  var data as ref(byte);
  data = res.data.m.addr;
  for (i = 0; i < n + 1; inc i)
  {
    data[i] = s[i];
  }
  exec on_closing();
  return res;
}

method del (var this as ref(str))
{
  del this.data;
}

method [](var this as ref(str), var i as int) as val ref(byte)
{
  var data as ref(byte);
  data = this.data.m.addr;
  return data + i;
}

method +(var a as ref(str), var b as ref(str)) as str
{
  exec on_opening();
  var res as str;
  res.data = mem_obj(a.length + b.length + 1);
  res.length = a.length + b.length;
  k = 0;
  for (i = 0; i < a.length; inc i)
  {
    res[k] = a[i];
    inc k;
  }
  for (i = 0; i < b.length + 1; inc i)
  {
    res[k] = b[i];
    inc k;
  }
  exec on_closing();
  return res;
}


method echo (var this as ref(str))
{

  exec on_opening();
  var data as ref(byte);
  data = this.data.m.addr;
  #echo u64(data);
  echo data;
  exec on_closing();
}

sub main()
{
  exec on_opening();
  echo str("hello");
  echo str("world");
  a = str("hello");
  b = str(" world");
  echo str("hello") + str(" world");

  s = str("abcd");
  s[0] = s[2];
  echo s;
  echo s;

  exec on_closing();
}

entry
{
  exec main();

  exec gc.collect();
  exec gc.clear();
  echo "gc test";
  echo app.allocator.used;
  echo "end";
}