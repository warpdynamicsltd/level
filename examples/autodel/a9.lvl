import stdlib:sys:app as *;

type ptr(A) as rec
(
  var ptr = null as ref(A),
  var ref_count as int
)

method ()(ptr(A)) as ref(ptr(A))
{
  var this as ref(ptr(A));
  this = app.allocator.allocate(sizeof(ptr(A)));
  this.ptr = null;
  this.ref_count = 0;
  return this;
}

method del(var this as ref(ptr(A)))
{
  if (this != null and this.ptr != null)
  {
    dec this.ref_count;
    if (this.ref_count <= 0)
    {
      del this.ptr;
      exec app.allocator.free(this.ptr);
      exec app.allocator.free(this);
    }
  }
}

type obj(A) extends object with
rec(
  var obj = null as ref(ptr(A))
)

method new ()(obj(A), var a as A) as obj(A)
{
  var this as obj(A);
  this.obj = ptr(A)();
  this.obj.ptr = app.allocator.allocate(sizeof(A));
  val this.obj.ptr = a;
  this.obj.ref_count = 1;
  return this;
}

method del (var this as ref(obj(A)))
{
  del this.obj;
}

method finish (var this as ref(obj(A)))
{
  del this;
}

method =(var this as ref(obj(A)), var a as ref(obj(A)))
{
  del this.obj;
  this.obj = a.obj;
  inc this.obj.ref_count;
}

type _str as rec
(
  var data = null as ref(byte),
  var count = 0 as int
)

sub len(var s as ref(byte)) as int
{
  i = 0;
  while(s[i] != 0)
  {
    inc i;
  }
  return i;
}

method ()(_str, var a as ref(byte)) as _str
{
  var this as _str;
  size = len(a) + 1;
  this.data = app.allocator.allocate(size);
  for (i = 0; i < size; inc i)
  {
    this.data[i] = a[i];
  }
  this.count = size - 1;
  return this;
}

method [](var this as ref(_str), var i as int) as val ref(byte)
{
  return this.data + i;
}

method +(var a as ref(_str), var b as ref(_str)) as _str
{
  var res as _str;
  res.data = app.allocator.allocate(a.count + b.count + 1);
  res.count = a.count + b.count;
  k = 0;

  for (i = 0; i < a.count; inc i)
  {
    res[k] = a[i];
    inc k;
  }
  for (i = 0; i < b.count + 1; inc i)
  {
    res[k] = b[i];
    inc k;
  }
  return res;
}

method del(var this as ref(_str))
{
  exec app.allocator.free(this.data);
}

type str extends obj(_str) with rec();

method new ()(str, var a as ref(byte)) as str
{
  return obj(_str)(_str(a));
}

method new +(var a as ref(str), var b as ref(str)) as str
{
  return obj(_str)(a.obj.ptr + b.obj.ptr);
}

method echo (var this as ref(str))
{
  echo this.obj.ptr.data;
}

sub main()
{
  echo str("main");
  var s as str;
  s = str("a");
  if (false)
  {
    s = str("hello");
  }
  else
  {
    s = str("world");
  }
  echo s;
}

sub loop()
{
  var s as str;
  s = str("aa");
  for (i = 0; i < 5; inc i)
  {
    s = s + str("aa");
    echo s;
  }

  echo s;
}

sub f(var s as str)
{
  s = s + str("bbbbb");
  echo s;
}

sub pass_test()
{
  s = str("aaaa");
  exec f(s);
  echo s;
}

sub g(var s as ref(str))
{
  val s = val s + str("bbbbb");
  echo s;
}

sub pass_ref_test()
{
  s = str("ccc");
  exec g(ref s);
}

entry
{
  exec main();
  echo "memory allocated";
  echo app.allocator.used;
  exec loop();
  echo "memory allocated";
  echo app.allocator.used;

  exec pass_test();
  echo "memory allocated";
  echo app.allocator.used;

  exec pass_ref_test();
  echo "memory allocated";
  echo app.allocator.used;
  echo "end";
}
